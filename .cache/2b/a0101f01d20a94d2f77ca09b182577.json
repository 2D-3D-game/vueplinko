{"id":"node_modules/@pixi/filter-noise/lib/noise.frag.mjs","dependencies":[{"name":"D:\\Data\\Work\\Pixi\\vueplinko\\node_modules\\@pixi\\filter-noise\\lib\\noise.frag.mjs.map","includedInParent":true,"mtime":1702597966000},{"name":"D:\\Data\\Work\\Pixi\\vueplinko\\package.json","includedInParent":true,"mtime":1702600080879},{"name":"D:\\Data\\Work\\Pixi\\vueplinko\\node_modules\\@pixi\\filter-noise\\package.json","includedInParent":true,"mtime":1702597965972}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar fragment = exports.default = `precision highp float;\n\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\n\nuniform float uNoise;\nuniform float uSeed;\nuniform sampler2D uSampler;\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid main()\n{\n    vec4 color = texture2D(uSampler, vTextureCoord);\n    float randomValue = rand(gl_FragCoord.xy * uSeed);\n    float diff = (randomValue - 0.5) * uNoise;\n\n    // Un-premultiply alpha before applying the color matrix. See issue #3539.\n    if (color.a > 0.0) {\n        color.rgb /= color.a;\n    }\n\n    color.r += diff;\n    color.g += diff;\n    color.b += diff;\n\n    // Premultiply alpha again.\n    color.rgb *= color.a;\n\n    gl_FragColor = color;\n}\n`;"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"8a0bdeaa6031a9bb65ad2b9c802ff5e4","cacheData":{"env":{}}}